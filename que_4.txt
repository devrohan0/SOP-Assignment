Logical operators in C are used to perform logical operations on Boolean expressions, which can either evaluate to true or false. There are three main logical operators in C:

&& (logical AND operator): This operator returns true if and only if both of its operands are true.
Example:



int a = 5;
int b = 3;

if (a > 0 && b < 5) {
    printf("Both conditions are true\n");
}
Output: "Both conditions are true"

In this example, the expression "a > 0" is true because a is greater than 0, and the expression "b < 5" is also true because b is less than 5. Therefore, the overall expression "a > 0 && b < 5" is true, and the printf statement will be executed.

|| (logical OR operator): This operator returns true if at least one of its operands is true.
Example:


int a = 5;
int b = 7;

if (a < 0 || b < 0) {
    printf("At least one of the conditions is true\n");
}
Output: "At least one of the conditions is true"

In this example, the expression "a < 0" is false because a is not less than 0, but the expression "b < 0" is true because b is less than 0. Therefore, the overall expression "a < 0 || b < 0" is true, and the printf statement will be executed.

! (logical NOT operator): This operator returns the opposite of its operand, i.e., it returns true if its operand is false, and vice versa.
Example:


int a = 5;
int b = 7;

if (!(a == b)) {
    printf("a is not equal to b\n");
}
Output: "a is not equal to b"







